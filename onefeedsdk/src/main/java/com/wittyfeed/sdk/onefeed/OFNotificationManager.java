package com.wittyfeed.sdk.onefeed;

import android.annotation.TargetApi;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Build;
import android.preference.PreferenceManager;
import android.support.annotation.RequiresApi;
import android.util.Log;
import android.widget.ImageView;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.ImageRequest;
import com.android.volley.toolbox.Volley;
import com.wittyfeed.sdk.onefeed.Utils.Constant;
import com.wittyfeed.sdk.onefeed.Utils.OFLogger;

import org.json.JSONObject;

import java.util.Map;

import static android.content.Context.NOTIFICATION_SERVICE;

/**
 * <p><span style="font-size: 13pt;"><strong>Handles the OneFeed Notifications which are received by the host app,</strong></span></p>
 * <p>and performs following actions -</p>
 * <ol>
 * <li>receives a pendingIntent which if set then opens when the user exits from the</li>
 * <li>notification content or story opened via OneFeed</li>
 * <li>verify that notification is from OneFeed Server</li>
 * <li>execute notification recieved analytics using OFAnalytics</li>
 * <li>create and show the notification in Notification Tray</li>
 * <li>play notification sound</li>
 * </ol>
 */
public final class OFNotificationManager {

    private static final OFNotificationManager ourInstance = new OFNotificationManager();
    private Intent homeScreenIntent;

    private OFNotificationManager() {
    }

    /**
     * @return a singleton instance of {@link OFNotificationManager}
     */
    public static OFNotificationManager getInstance() {
        return ourInstance;
    }

    /**
     * Clears notification tray messages
     * @param applicationContext the appliation context
     */
    private static void clearNotifications(Context applicationContext) {
        try {
            NotificationManager notificationManager = (NotificationManager) applicationContext.getSystemService(NOTIFICATION_SERVICE);
            notificationManager.cancelAll();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * <p>Receives the data from Firebase RemoteMessage and other required elements, then</p>
     * <p style="padding-left: 30px;">verifies that notification is generated by OneFeed,
     * <br />then creates pendingIntent,
     * <br />then shows a notification about the same</p>
     *
     * @param applicationContext    the application context
     * @param fcm_token             String
     * @param data                  messageData as received from Firebase
     * @param preferred_notiff_icon host app should set their preferable icon for the notifications received through OneFeed in their application
     */
    public void handleNotification(Context applicationContext, String fcm_token, Map<String, String> data, int preferred_notiff_icon, String app_id) {
        try {
            if (data.get("notiff_agent") != null) {
                if (data.get("notiff_agent").equals("wittyfeed_sdk")) {
                    /*when notification from wittyfeed is recieved we are calling show notification method*/
                    if (data.get("body") != null && data.get("title") != null) {
                        OFLogger.log(OFLogger.DEBUG, "building notification");

                        Intent contentViewIntent;

                        contentViewIntent = new Intent(applicationContext, OFContentViewActivity.class);

                            OFAnalytics.getInstance().sendAnalytics(
                                    applicationContext,
                                    app_id,
                                    OFAnalytics.AnalyticsType.NotificationReceived,
                                    ""
                                            + data.get("story_id")
                                            + ":"
                                            + data.get("id")
                            );

                        contentViewIntent.putExtra("is_loaded_notification", true);
                        contentViewIntent.putExtra("fallback", true);
                        contentViewIntent.putExtra("fcm_token", fcm_token);
                        contentViewIntent.putExtra("app_id", data.get("app_id"));
                        contentViewIntent.putExtra("story_id", data.get("story_id"));
                        contentViewIntent.putExtra("story_title", data.get("story_title"));
                        contentViewIntent.putExtra("url_to_open", data.get("story_url"));
                        contentViewIntent.putExtra("id", data.get("id"));

                        String coverImgUrl = null;
                        if (data.get("cover_image") != null) {
                            coverImgUrl = data.get("cover_image");
                        }
                        OFLogger.log(OFLogger.DEBUG, "Cover Image URL: " + coverImgUrl);

                        showNotification(applicationContext, data.get("title"), data.get("body"), preferred_notiff_icon, contentViewIntent, coverImgUrl);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Displays the notification in notification tray
     *
     * @param applicationContext the application context
     * @param notification_title title of the notification
     * @param notification_body  body of the notification
     * @param notiff_icon        icon to show in notification
     * @param intent             pending intent to open when did tap on notification
     * @param coverImgUrl        cover image to show in notification
     */
    private void showNotification(final Context applicationContext, final String notification_title, final String notification_body, final int notiff_icon, Intent intent, String coverImgUrl) {
        final NotificationManager notificationManager = (NotificationManager) applicationContext.getSystemService(Context.NOTIFICATION_SERVICE);
        final String CHANNEL_NAME = "Trending Stories";
        final String NOTIFICATION_CHANNEL_ID = "notification_channel_location";
        final int NOTIFICATION_ID = 100;
        int importance = NotificationManager.IMPORTANCE_HIGH;
        try {
            final PendingIntent pendingIntent = PendingIntent.getActivity(
                    applicationContext,
                    NOTIFICATION_ID,
                    intent,
                    PendingIntent.FLAG_UPDATE_CURRENT
            );

            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                NotificationChannel mChannel = new NotificationChannel(
                        NOTIFICATION_CHANNEL_ID, CHANNEL_NAME, importance);
                notificationManager.createNotificationChannel(mChannel);
            }

            /*build our notification*/
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                ImageRequest imageRequest = null;
                final Notification.Builder builder = new Notification.Builder(applicationContext, NOTIFICATION_CHANNEL_ID);
                imageRequest = new ImageRequest(coverImgUrl, new Response.Listener<Bitmap>() {
                    @RequiresApi(api = Build.VERSION_CODES.O)
                    @Override
                    public void onResponse(Bitmap response) {

                        /*create notification*/
                        final Notification mNotification = builder.setSmallIcon(notiff_icon)
                                .setAutoCancel(true)
                                .setContentIntent(pendingIntent)
                                .setContentTitle(notification_title + "")
                                .setContentText(notification_body)
                                .setChannelId(NOTIFICATION_CHANNEL_ID)
                                .setLargeIcon(BitmapFactory.decodeResource(applicationContext.getResources(), notiff_icon))
                                .setStyle(new Notification.BigPictureStyle().bigPicture(response))
                                .build();

                        /*notification flag for cancel notification automatically*/
                        mNotification.flags |= Notification.FLAG_AUTO_CANCEL;

                        /*notify the user*/
                        notificationManager.notify(NOTIFICATION_ID, mNotification);


                        OFLogger.log(OFLogger.DEBUG, "done showing notificaiton");
                        if (!(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)) {
                            playNotificationSound(applicationContext);
                        }

                    }
                }, 0, 0, ImageView.ScaleType.CENTER, Bitmap.Config.ARGB_4444,

                        new Response.ErrorListener() {
                            @TargetApi(Build.VERSION_CODES.O)
                            @Override
                            public void onErrorResponse(VolleyError error) {

                                OFLogger.log(OFLogger.DEBUG, "onErrorResponse: notification image loading error", error);

                                /*create notification*/
                                final Notification mNotification = builder.setSmallIcon(notiff_icon)
                                        .setAutoCancel(true)
                                        .setContentIntent(pendingIntent)
                                        .setContentTitle(notification_title + "")
                                        .setContentText(notification_body)
                                        .setChannelId(NOTIFICATION_CHANNEL_ID)
                                        .setLargeIcon(BitmapFactory.decodeResource(applicationContext.getResources(), notiff_icon))
                                        .build();

                                /*notification flag for cancel notification automatically*/
                                mNotification.flags |= Notification.FLAG_AUTO_CANCEL;

                                /*notify the user*/
                                notificationManager.notify(NOTIFICATION_ID, mNotification);

                                OFLogger.log(OFLogger.DEBUG, "done showing notificaiton");
                                if (!(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)) {
                                    playNotificationSound(applicationContext);
                                }
                            }

                        });
                Volley.newRequestQueue(applicationContext).add(imageRequest);

            } else {
                ImageRequest imageRequest = null;
                final Notification.Builder builder = new Notification.Builder(applicationContext);
                imageRequest = new ImageRequest(coverImgUrl, new Response.Listener<Bitmap>() {
                    @Override
                    public void onResponse(Bitmap response) {

                        /*create notification*/
                        final Notification mNotification = builder.setSmallIcon(notiff_icon)
                                .setAutoCancel(true)
                                .setContentIntent(pendingIntent)
                                .setContentTitle(notification_title + "")
                                .setContentText(notification_body)
                                .setLargeIcon(BitmapFactory.decodeResource(applicationContext.getResources(), notiff_icon))
                                .setStyle(new Notification.BigPictureStyle().bigPicture(response))
                                .build();

                        /*notification flag for cancel notification automatically*/
                        mNotification.flags |= Notification.FLAG_AUTO_CANCEL;

                        /*notify the user*/
                        notificationManager.notify(NOTIFICATION_ID, mNotification);


                        OFLogger.log(OFLogger.DEBUG, "done showing notificaiton");
                        if (!(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)) {
                            playNotificationSound(applicationContext);
                        }

                    }
                }, 0, 0, ImageView.ScaleType.CENTER, Bitmap.Config.ARGB_4444,

                        new Response.ErrorListener() {
                            @Override
                            public void onErrorResponse(VolleyError error) {

                                OFLogger.log(OFLogger.DEBUG, "onErrorResponse: notification image loading error", error);

                                /*create notification*/
                                final Notification mNotification = builder.setSmallIcon(notiff_icon)
                                        .setAutoCancel(true)
                                        .setContentIntent(pendingIntent)
                                        .setContentTitle(notification_title + "")
                                        .setContentText(notification_body)
                                        .setLargeIcon(BitmapFactory.decodeResource(applicationContext.getResources(), notiff_icon))
                                        .build();

                                /*notification flag for cancel notification automatically*/
                                mNotification.flags |= Notification.FLAG_AUTO_CANCEL;

                                /*notify the user*/
                                notificationManager.notify(NOTIFICATION_ID, mNotification);


                                OFLogger.log(OFLogger.DEBUG, "done showing notificaiton");
                                if (!(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)) {
                                    playNotificationSound(applicationContext);
                                }
                            }

                        });
                Volley.newRequestQueue(applicationContext).add(imageRequest);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * plays the sound for notification received to alert tshe user about the same
     *
     * @param applicationContext the application context
     */
    private void playNotificationSound(Context applicationContext) {
        try {
            final Uri notiffSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
            Ringtone r = RingtoneManager.getRingtone(applicationContext, notiffSound);
            r.play();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Returns the intent which will be called after the user has opened the notification and then exits from it
     *
     * @return the intent
     */
    public Intent getHomeScreenIntent() {
        return homeScreenIntent;
    }

    /**
     * Set the intent which should be called after the user has opened the notification and then exits from it,
     * e.g. MainActivity, or SplashActivity of host app
     *
     * @param homeScreenIntent   the intent
     * @param applicationContext the application context
     */
    public void setHomeScreenIntent(Context applicationContext, Intent homeScreenIntent) {
        homeScreenIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        this.homeScreenIntent = homeScreenIntent;
        String classPassedInIntent = homeScreenIntent.getComponent().getClassName();
        PreferenceManager.getDefaultSharedPreferences(applicationContext).edit().putString(Constant.SAVED_HOME_SCREEN_CLASS, classPassedInIntent).apply();
    }
}
